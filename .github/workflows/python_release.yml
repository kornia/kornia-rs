name: Python Release

on:
  workflow_dispatch:

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12", "3.13", "3.13t"]
        target: [x86_64, aarch64]

    steps:
      - uses: ilammy/setup-nasm@v1
      - uses: actions/checkout@v4
      - uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          command: build
          before-script-linux: |
            if command -v dnf &> /dev/null; then dnf install cmake3 -y; elif command -v yum &> /dev/null; then yum install cmake3 -y; elif command -v apt-get &> /dev/null; then apt-get update && apt-get install cmake -y; else echo "None of dnf, yum, or apt found."; fi
            if command -v cmake3 &> /dev/null; then export CMAKE=cmake3; fi
          args: --release --out dist -i python${{ matrix.python-version }} -m kornia-py/Cargo.toml --sdist
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.target }}-${{ matrix.python-version }}-wheels
          path: dist

  macos:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - runs-on: macos-13
            python-version: "3.7"
            target: x86_64
          - runs-on: macos-13
            python-version: "3.7"
            target: aarch64
          - runs-on: macos-13
            python-version: "3.8"
            target: x86_64
          - runs-on: macos-13
            python-version: "3.8"
            target: aarch64
          - runs-on: macos-13
            python-version: "3.9"
            target: x86_64
          - runs-on: macos-13
            python-version: "3.9"
            target: aarch64
          - runs-on: macos-13
            python-version: "3.10"
            target: x86_64
          - runs-on: macos-13
            python-version: "3.10"
            target: aarch64
          - runs-on: macos-14
            python-version: "3.11"
            target: x86_64
          - runs-on: macos-14
            python-version: "3.11"
            target: aarch64
          - runs-on: macos-14
            python-version: "3.12"
            target: x86_64
          - runs-on: macos-14
            python-version: "3.12"
            target: aarch64
          - runs-on: macos-14
            python-version: "3.13"
            target: x86_64
          - runs-on: macos-14
            python-version: "3.13"
            target: aarch64
          - runs-on: macos-14
            python-version: "3.13t"
            target: x86_64
          - runs-on: macos-14
            python-version: "3.13t"
            target: aarch64
    steps:
      - uses: ilammy/setup-nasm@v1
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}-apple-darwin
          override: true
      - uses: messense/maturin-action@v1
        with:
          command: build
          maturin-version: latest
          args: --release --target ${{ matrix.target }}-apple-darwin --out dist -i python${{ matrix.python-version }} -m kornia-py/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}-${{ matrix.python-version }}-wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12", "3.13", "3.13t"]
        target: [x64, x86]
    steps:
      - uses: ilammy/setup-nasm@v1
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # x86 python needs to be available for the win32 wheel
          architecture: ${{ ( matrix.os == 'windows-latest' && matrix.target == 'i686' ) && 'x86' || null }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: |
          pip install cmake<4
      - uses: messense/maturin-action@v1
        with:
          command: build
          maturin-version: latest
          args: --release --out dist -i python${{ matrix.python-version }} -m kornia-py/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}-${{ matrix.python-version }}-wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, linux]
    steps:
      - run: sudo apt-get update
      - uses: actions/download-artifact@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Publish to PyPi
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_PASSWORD }}
        uses: messense/maturin-action@v1
        with:
          command: upload
          args: --skip-existing *-wheels/*
